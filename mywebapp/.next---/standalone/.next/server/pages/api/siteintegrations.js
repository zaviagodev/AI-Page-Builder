"use strict";(()=>{var e={};e.id=2446,e.ids=[2446],e.modules={8013:e=>{e.exports=require("mongodb")},614:e=>{e.exports=require("next-auth/jwt")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7824:(e,t,a)=>{a.r(t),a.d(t,{config:()=>l,default:()=>d,routeModule:()=>p});var r={};a.r(r),a.d(r,{default:()=>c});var s=a(1802),n=a(7153),i=a(6249),o=a(3919),u=a(614);async function handler(e,t){let a=await (0,u.getToken)({req:e});if(!a){t.status(200).json({ok:!0,status:401,error:"Not authenticated!"});return}let r=a.name;if("POST"===e.method){let a;let s=JSON.parse(e.body),n=s.captchaSiteKey,i=s.captchaSecretKey;try{a=await (0,o.T)()}catch(e){t.status(200).json({ok:!0,status:500,error:"Connecting to the database failed."});return}try{let e=a.db(),s=await e.collection("users").findOne({username:r});s&&await e.collection("users").updateOne({username:r},{$set:{captchaSiteKey:n,captchaSecretKey:i}}),await a.close(),t.status(200).json({ok:!0,status:200})}catch(e){await a.close(),t.status(200).json({ok:!0,status:500,error:"Something went wrong."})}}}let c=handler,d=(0,i.l)(r,"default"),l=(0,i.l)(r,"config"),p=new s.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/siteintegrations",pathname:"/api/siteintegrations",bundlePath:"",filename:""},userland:r})}};var t=require("../../webpack-api-runtime.js");t.C(e);var __webpack_exec__=e=>t(t.s=e),a=t.X(0,[4222,3919],()=>__webpack_exec__(7824));module.exports=a})();